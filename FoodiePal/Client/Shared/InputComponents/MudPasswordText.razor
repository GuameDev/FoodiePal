@using System.Text.RegularExpressions;

<MudTextField T="string" @bind-Value="@BindTo" Label="@Label" HelperText="@HelperText" @ref="passwordField"
              InputType="@inputType"
              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
              RequiredError="Password is required!"
              Adornment="Adornment.End"
              AdornmentIcon="@passwordInputIcon"
              OnAdornmentClick="ChangePasswordVisibility"
              AdornmentAriaLabel="Show Password"
              MaxLength="@MaxLength"
               >
    <MudIconButton Icon="@Icons.Material.Filled.Visibility" OnClick="@(()=>ChangePasswordVisibility())"></MudIconButton>
</MudTextField>

@code {

    bool isShow;
    InputType inputType = InputType.Password;
    string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string HelperText { get; set; } = string.Empty;

    [Parameter]
    public string Value{ get; set; } = string.Empty;

    [Parameter]
    public int MaxLength { get; set; } = 50;

  


    [Parameter]
    public EventCallback<string> BindToChanged { get; set; }

    private string bindingValue;
    [Parameter]
    public string BindTo
    {
        get => bindingValue;
        set
        {
            if (bindingValue == value) return;
            bindingValue = value;
            BindToChanged.InvokeAsync(value);
        }
    }

    MudTextField<string> passwordField = new MudTextField<string>(); 


    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    private async Task OnInputChange(ChangeEventArgs args)
    {
        Value = (string)args.Value;
        await ValueChanged.InvokeAsync(Value);
    }

    private void ChangePasswordVisibility()
    {
        @if (isShow)
        {
            isShow = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            inputType = InputType.Password;
        }
        else
        {
            isShow = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            inputType = InputType.Text;
        }
    }


    private IEnumerable<string> PasswordStrength(string password)
    {

        var result = new List<string>();

        if (string.IsNullOrWhiteSpace(password))
        {
            result.Add("Password is required!");
        }
        if (password.Length < 8)
            result.Add("Password must be at least of length 8");

        if (!Regex.IsMatch(password, @"[A-Z]"))
            result.Add("Password must contain at least one capital letter");

        if (!Regex.IsMatch(password, @"[a-z]"))
            result.Add("Password must contain at least one lowercase letter");

        if (!Regex.IsMatch(password, @"[0-9]"))
            result.Add("Password must contain at least one digit");

        return result;
    }

}
